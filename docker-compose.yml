version: '3'
services:
  redis:
    image: redis
    restart: always
    volumes:
      - ./data/redis:/data
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: default
      POSTGRES_PASSWORD: user
      POSTGRES_USER: user
      POSTGRES_CHARSET: "UTF8"
#    volumes:
#      - ./var/lib/postgresql/data:/var/lib/postgresql/data
    networks:
      - default
    ports:
      - 5432:5432
  php:
    build: .docker/php
    volumes:
      - ./application:/var/www/html
    environment:
      - APP_DEV_PERMITTED=true
      - PHP_DATE_TIMEZONE=UTC
    networks:
      - default
    working_dir: /var/www/html
  nginx:
    image: nginx:latest
    volumes:
      - .docker/nginx/upstream.conf:/etc/nginx/conf.d/upstream.conf
      - .docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./application:/var/www/html
    networks:
      - default
    ports:
      - 80:80

  webpack:
      build: ./etc/webpack
      restart: always
      volumes:
          - ./application/:/var/www/html
      command: ["sleep","infinity"]

  rabbitmq:
    image: rabbitmq:3.7.3-management
    ports:
    - "15672:15672"
    volumes:
    - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq.conf:ro
    - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
#
#    zookeeper:
#        image: zookeeper:latest
#        hostname: zookeeper
#        container_name: zookeeper
#        ports:
#          - "2181:2181"
#        environment:
#            ZOO_MY_ID: 1
#            ZOO_PORT: 2181
#            ZOO_SERVERS: server.1=zoo1:2888:3888
#        volumes:
#          - ./data/zoo/data:/data
#          - ./data/zoo/datalog:/datalog
#
#    kafka:
#        image: confluentinc/cp-kafka:latest
#        hostname: kafka
#        container_name: kafka
#        ports:
#        - "9092:9092"
#        environment:
#            KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
#            KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
#            KAFKA_BROKER_ID: 1
#            KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
#            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#        volumes:
#        - ./data/kafka/data:/var/lib/kafka/data
#        depends_on:
#        - zookeeper
#
#    superset:
#        image: huksley/superset
#        restart: always
#        depends_on:
#          - mysql
#        ports:
#          - "8088:8088"
#
#    tranquility:
#        image: rusnyder/tranquility:latest
#        volumes:
#          - ./etc/tranquility:/etc/tranquility
#        environment:
#          TRANQUILITY_CONFIG_FILE: /etc/tranquility/config.json
#          TRANQUILITY_PROPERTIES_ZOOKEEPER_CONNECT: zookeeper:2181
#        ports:
#          - "8200:8200"
#
#    overlord:
#        image: znly/druid:latest
#        environment:
#          - DRUID_XMX=1g
#          - DRUID_XMS=1g
#          - DRUID_MAXNEWSIZE=250m
#          - DRUID_NEWSIZE=250m
#        command:
#          - overlord
#        ports:
#          - "8090:8090"
#
#    coordinator:
#        image: znly/druid:latest
#        environment:
#          - DRUID_XMX=1g
#          - DRUID_XMS=1g
#          - DRUID_MAXNEWSIZE=250m
#          - DRUID_NEWSIZE=250m
#        command:
#          - coordinator
#        ports:
#          - "8081:8081"
#
#    middlemanager:
#        image: znly/druid:latest
#        environment:
#          - DRUID_XMX=1g
#          - DRUID_XMS=1g
#          - DRUID_MAXNEWSIZE=250m
#          - DRUID_NEWSIZE=250m
#        command:
#          - middleManager
#
#    historical:
#        image: znly/druid:latest
#        environment:
#          - DRUID_XMX=1g
#          - DRUID_XMS=1g
#          - DRUID_MAXNEWSIZE=250m
#          - DRUID_NEWSIZE=250m
#        command:
#          - historical
#        ports:
#          - "8083:8083"
#
#    broker:
#        image: znly/druid:latest
#        environment:
#          - DRUID_XMX=1g
#          - DRUID_XMS=1g
#          - DRUID_MAXNEWSIZE=250m
#          - DRUID_NEWSIZE=250m
#        command:
#          - broker
#        ports:
#          - "8082:8082"
#
#    influxdb:
#        image: influxdb:latest
#        container_name: influxdb
#        ports:
#          - "18083:8083"
#          - "18086:8086"
#          - "18090:8090"
#        env_file:
#          - './etc/env.influxdb'
#        volumes:
#          - ./data/influxdb/data:/var/lib/influxdb
#
#    telegraf:
#        image: telegraf:latest
#        container_name: telegraf
#        links:
#          - influxdb
#        volumes:
#          - ./etc/telegraf.conf:/etc/telegraf/telegraf.conf:ro
#
#    grafana:
#        image: grafana/grafana:latest
#        container_name: grafana
#        ports:
#          - "3000:3000"
#        env_file:
#          - './etc/env.grafana'
#        links:
#          - influxdb
#
#    historical:
#        build: ./etc/druid
#        image: druid
#        command:
#          - historical
#          - -Ddruid.zk.service.host=zookeeper
#          - -Ddruid.metadata.storage.type=mysql
#          - -Ddruid.metadata.storage.connector.connectURI=jdbc:mysql://mysql/druid
#          - -Ddruid.metadata.storage.connector.user=druid
#          - -Ddruid.metadata.storage.connector.password=diurd
#          - '-Ddruid.extensions.loadList=["mysql-metadata-storage"]'
#          - -Djava.io.tmpdir=/usr/local/druid/var/tmp
#          - -Xms0m
#          - -Xmx512m
#          - -XX:+PrintGC
#        ports:
#          - '28083:8083'
#        volumes:
#          - './data/druid/data/historical:/usr/local/druid/var/druid:rw'
#        depends_on:
#          - zookeeper
#          - mysql
#
#    broker:
#        build: ./etc/druid
#        image: druid
#        command:
#          - broker
#          - -Ddruid.zk.service.host=zookeeper
#          - -Ddruid.metadata.storage.type=mysql
#          - -Ddruid.metadata.storage.connector.connectURI=jdbc:mysql://mysql/druid
#          - -Ddruid.metadata.storage.connector.user=druid
#          - -Ddruid.metadata.storage.connector.password=diurd
#          - '-Ddruid.extensions.loadList=["mysql-metadata-storage"]'
#          - -Djava.io.tmpdir=/usr/local/druid/var/tmp
#          - -Xms0m
#          - -Xmx512m
#          - -XX:+PrintGC
#        ports:
#          - '28082:8082'
#        volumes:
#          - './data/druid/data/broker:/usr/local/druid/var/druid:rw'
#        depends_on:
#          - zookeeper
#          - mysql
#
#    coordinator:
#        build: ./etc/druid
#        image: druid
#        command:
#          - coordinator
#          - -Ddruid.zk.service.host=zookeeper
#          - -Ddruid.metadata.storage.type=mysql
#          - -Ddruid.metadata.storage.connector.connectURI=jdbc:mysql://mysql/druid
#          - -Ddruid.metadata.storage.connector.user=druid
#          - -Ddruid.metadata.storage.connector.password=diurd
#          - '-Ddruid.extensions.loadList=["mysql-metadata-storage"]'
#          - -Djava.io.tmpdir=/usr/local/druid/var/tmp
#          - -Xms0m
#          - -Xmx512m
#          - -XX:+PrintGC
#        ports:
#          - '28081:8081'
#        volumes:
#          - './data/druid/data/coordinator:/usr/local/druid/var/druid:rw'
#        depends_on:
#          - zookeeper
#          - mysql
#
#    overlord:
#        build: ./etc/druid
#        image: druid
#        command:
#          - overlord
#          - -Ddruid.zk.service.host=zookeeper
#          - -Ddruid.metadata.storage.type=mysql
#          - -Ddruid.metadata.storage.connector.connectURI=jdbc:mysql://mysql/druid
#          - -Ddruid.metadata.storage.connector.user=druid
#          - -Ddruid.metadata.storage.connector.password=diurd
#          - '-Ddruid.extensions.loadList=["mysql-metadata-storage"]'
#          - -Djava.io.tmpdir=/usr/local/druid/var/tmp
#          - -Ddruid.indexer.task.restoreTasksOnRestart=true
#          - -Xms0m
#          - -Xmx512m
#          - -XX:+PrintGC
#        ports:
#          - '28090:8090'
#        volumes:
#          - './data/druid/data/overlords:/usr/local/druid/var/druid:rw'
#        depends_on:
#          - zookeeper
#          - mysql
#
#    middle_manager:
#        build: ./etc/druid
#        image: druid
#        command:
#          - middleManager
#          - -Ddruid.zk.service.host=zookeeper
#          - -Ddruid.metadata.storage.type=mysql
#          - -Ddruid.metadata.storage.connector.connectURI=jdbc:mysql://mysql/druid
#          - -Ddruid.metadata.storage.connector.user=druid
#          - -Ddruid.metadata.storage.connector.password=diurd
#          - '-Ddruid.extensions.loadList=["mysql-metadata-storage"]'
#          - -Djava.io.tmpdir=/usr/local/druid/var/tmp
#          - -Xms0m
#          - -Xmx512m
#          - -XX:+PrintGC
#        volumes:
#          - './data/druid/data/middle_manager:/usr/local/druid/var/druid:rw'
#        depends_on:
#          - zookeeper
#          - mysql
#
#    tranquility:
#        build: ./etc/tranquility
#        image: tranquility
#        command:
#          - kafka
#          - -J-Xms0m
#          - -J-Xmx128m
#          - -J-XX:+PrintGC
#          - -Dzookeeper.connect=zookeeper
#          - -Djava.io.tmpdir=/usr/local/tranquility/var/tmp
#          - -configFile=conf/kafka.json
#        volumes:
#          - './etc/tranquility/conf/tranquility/:/usr/local/tranquility/conf/:rw'
#          - './data/extensions/tranquility/:/usr/local/tranquility/extensions/:rw'
#        ports:
#          - '8200:8200'
#        depends_on:
#          - zookeeper
#          - overlord
#
#
#    namenode:
#        image: bde2020/hadoop-namenode:1.1.0-hadoop2.8-java8
#        container_name: namenode
#        volumes:
#          - ./data/namenode:/hadoop/dfs/name
#        environment:
#          - CLUSTER_NAME=test
#        env_file:
#          - ./hadoop-hive.env
#        ports:
#          - 50070:50070
#
#    datanode:
#        image: bde2020/hadoop-datanode:1.1.0-hadoop2.8-java8
#        depends_on:
#          - namenode
#        volumes:
#          - ./data/datanode:/hadoop/dfs/data
#        env_file:
#          - ./hadoop-hive.env
#        ports:
#          - 50075:50075
#
#    hive-server:
#        image: bde2020/hive:2.1.0-postgresql-metastore
#        container_name: hive-server
#        env_file:
#          - ./hadoop-hive.env
#        environment:
#          - "HIVE_CORE_CONF_javax_jdo_option_ConnectionURL=jdbc:postgresql://hive-metastore/metastore"
#        ports:
#          - "10000:10000"
#
#    hive-metastore:
#        image: bde2020/hive:2.1.0-postgresql-metastore
#        container_name: hive-metastore
#        env_file:
#          - ./hadoop-hive.env
#        command: /opt/hive/bin/hive --service metastore
#
#    hive-metastore-postgresql:
#        image: bde2020/hive-metastore-postgresql:2.1.0
#
#    spark-master:
#        image: bde2020/spark-master:2.1.0-hadoop2.8-hive-java8
#        container_name: spark-master
#        ports:
#          - 38080:8080
#          - 7077:7077
#        env_file:
#          - ./hadoop-hive.env
#
#    spark-worker:
#        image: bde2020/spark-worker:2.1.0-hadoop2.8-hive-java8
#        depends_on:
#          - spark-master
#        environment:
#          - SPARK_MASTER=spark://spark-master:7077
#        ports:
#          - "18081:8081"
#        env_file:
#          - ./hadoop-hive.env
#
#    spark-notebook:
#        image: bde2020/spark-notebook:2.1.0-hadoop2.8-hive
#        container_name: spark-notebook
#        env_file:
#          - ./hadoop-hive.env
#        ports:
#          - 9001:9001
#
#    hue:
#        image: bde2020/hdfs-filebrowser:3.11
#        ports:
#          - 8088:8088
#        environment:
#          - NAMENODE_HOST=namenode

networks:
  default: ~